// Code generated by go-bindata. DO NOT EDIT.
// sources:
// deploy/data/virtlet-ds.yaml
package tools

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _deployDataVirtletDsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x53\x1b\x3b\xf2\x7f\xe7\x53\x74\x1d\xaa\xfe\x49\x1e\x86\x81\xd4\xff\x6c\x72\x5c\xbb\x0f\x04\xfb\xb0\xae\x80\xed\x32\x97\x9c\x37\x97\x46\xd3\x1e\x6b\xad\x91\x66\x25\xcd\x80\xf7\xd3\x6f\x49\x73\xf1\xdc\x6c\x0c\x01\x6a\xe3\x17\x8c\xa4\xfe\xa9\xef\xdd\x92\xe5\x79\xde\x11\x49\xd8\x3d\x2a\xcd\xa4\x18\x00\x49\x12\xed\x67\x67\x47\x6b\x26\xc2\x01\x0c\x09\xc6\x52\xdc\xa0\x39\x8a\xd1\x90\x90\x18\x32\x38\x02\x10\x24\xc6\x01\x64\x4c\x19\x8e\xa6\xf8\x5f\x27\x84\xe2\x00\xd6\x69\x80\x9e\xde\x68\x83\xf1\x91\x4e\x90\xda\xe5\x1a\x39\x52\x23\x95\xfd\x0e\x10\x13\x43\x57\x57\x24\x40\xae\xf3\x01\x00\x95\x0a\xc3\x9a\x90\x06\xe3\x84\x13\x83\x05\x4d\x6d\x73\xfb\x69\x33\x60\x3f\xbc\x01\xd9\x0b\x0a\x50\xb2\x64\x3f\x2b\xa9\xcd\x04\xcd\x83\x54\xeb\x01\x18\x95\x62\x31\x1e\x0a\x3d\x93\x9c\xd1\xcd\x00\x2e\x78\xaa\x0d\xaa\x3f\x99\xd2\xe6\x07\x33\xab\x7f\xe6\x24\xc5\xc2\x63\x07\x31\x1b\x0f\x81\x69\x07\x00\x46\xc2\xc7\xb3\x4f\x80\x82\x04\x1c\xe1\xfe\x5a\xdb\x11\x9d\xaa\x8c\x65\x58\xf2\x01\x54\x0a\x43\x98\x40\x05\x0a\xb5\x21\x6a\x0b\xf7\xd1\x48\x08\x10\xe8\x0a\xe9\x1a\xc3\x4f\x40\x44\x08\x1f\x3f\x7f\xb2\x20\x05\xa4\x59\x21\xa4\x1a\x41\x2e\x41\x68\x14\x06\x15\x30\x01\x4c\xb0\x1a\x6c\x4d\xbc\xd9\x78\xd8\x10\xed\x18\x02\x29\x8d\x36\x8a\x24\x90\x28\x49\x31\x4c\x15\x82\x40\x0c\x1d\xa7\x54\x21\x31\x08\xc4\x62\x2d\x59\x14\x93\xc4\xa2\xd7\x4c\xba\xb5\x74\x01\xa8\x51\x65\x8c\xe2\x39\xa5\x32\x15\x66\xd2\x30\x4b\xb5\xa7\x14\x7c\x63\xcd\x01\xf7\x85\x06\x12\x19\x6a\x90\xc2\x49\x23\x64\x88\x1a\x1e\x98\x59\x01\x3e\x1a\x45\xe6\xb9\xd9\xfe\x51\x6a\xcb\x99\xb5\x80\x22\xcb\xa5\x15\x75\xb3\x35\xb2\xa5\x3e\xef\x8c\x02\x28\xfc\x77\xca\x14\x86\xc3\x54\x31\x11\xdd\xd0\x15\x86\x29\x67\x22\x1a\x47\x42\x56\xc3\xa3\x47\xa4\xa9\xb1\x5e\x5f\xa3\xcc\x31\x6f\x0a\x97\xbd\x45\x15\xeb\xe6\xb4\x97\x7b\xf0\xe8\x31\x51\xa8\x6d\xcc\xb4\xe6\xed\x8a\x35\x6e\x06\x0d\x71\x5a\x2b\x00\x64\x82\x8a\xd8\x98\x80\xb1\xe8\x4c\x66\x84\xa7\xd8\x81\xb5\xc0\x2d\xdd\x5a\xb9\x2f\x4a\xbb\x57\x04\xc7\x70\xbb\xc2\x96\x53\x00\x95\x09\x43\x5d\x02\x7c\xd0\xb0\xe4\xf8\x98\x49\x9e\xc6\x08\xa1\x62\x59\xe5\x37\xc7\xd6\x13\xac\x65\x42\x5c\x92\x94\x1b\x67\x7f\x67\x35\x9e\x46\x4c\x40\xc8\x94\x73\x4c\x14\x3a\x55\xa8\xc1\xac\xc8\xd6\x83\x1d\x1d\x53\x4e\x77\x76\x3b\xeb\x5a\x18\x42\xb0\x01\xce\x02\xbb\x37\xfc\x5f\x15\x07\xf8\xc8\xb4\x29\xdd\xc0\x7a\xeb\x51\x29\x65\x1e\xde\x89\xc2\x84\x28\xf4\xac\x3d\x2a\x55\xb0\x98\x44\x38\x80\x98\x29\x22\x0c\xd3\x7e\x33\x07\x14\xf3\xb3\x94\xf3\x32\x84\xc7\xcb\x89\x34\x33\x85\x36\x5a\xaa\x55\x54\xc6\x31\x11\xe1\x56\xc3\x1e\xf8\xf5\xed\x4e\xf4\xaa\x9a\xca\x75\x74\x6d\xfd\x5b\xd7\x09\x72\x26\xd7\x5f\xb5\xb7\xd5\xa4\x97\xeb\x48\x7b\x21\x53\x35\xeb\xc5\x96\x78\x46\xcc\x6a\x00\x7e\xa1\x4d\xaf\x49\xd0\xc1\x55\xa9\xe8\x00\x28\x99\x90\x88\x38\x87\x85\x6f\x2c\x57\x33\x93\x82\xf0\x1d\x5b\xd5\x31\x4a\xdc\x50\xd2\x35\x2a\x2d\xe9\x7a\x07\x51\x46\x94\x25\xf4\xf3\x85\x27\x8d\x95\x25\x08\x97\xd1\x0e\x6a\x6b\xc6\xfa\xec\x31\x2c\xa5\xca\x5d\x85\x89\xc8\xf9\x4a\xbe\x05\x67\x81\x5f\xb8\x84\xef\x6c\xa6\x73\x7f\x70\x79\xa1\x61\xf1\x72\xd3\x8c\x28\x8f\xb3\x60\xcf\xc6\x5e\x7b\x49\x25\x34\x66\x3b\xc8\xea\x33\x5e\x47\x0f\x96\xc9\xb6\x83\xf5\x17\x1f\x9b\x09\x69\xaa\x98\xd9\xd8\x70\xc4\x47\x53\x0f\xde\x44\xb1\x8c\x71\x8c\x30\x6c\x24\x63\x00\x14\x59\xd7\xa3\xbe\xdf\x7d\x1b\x2d\x26\xd3\xe1\x68\x31\x39\xbf\x1e\xd5\x60\x5c\x56\xf8\x53\xc9\xb8\x99\x18\x96\x0c\x79\x38\xc7\x65\x3b\x5d\xd4\x8b\x7a\x76\xd6\x9a\x74\x44\xb9\xa4\xb6\x24\x9e\x58\x8d\xdb\xec\xdd\xe1\xe6\x7e\x3c\xbf\xbd\x1a\xdd\x2e\x86\xe3\x9b\xf3\x6f\x57\xa3\xc5\xf7\xfb\xeb\xa7\x59\xca\xcb\xc7\x35\x49\xbe\xe3\xa6\x87\xb3\x86\x02\xbd\x7c\x71\x6b\x89\x4b\xa0\x21\xd3\xb6\xe8\x2d\xd6\x59\xdc\x9a\x96\x49\xee\xf8\x2d\x7d\xb6\x99\xbe\x99\x8f\xa7\xf7\x8b\x9b\xbb\xd9\x6c\x3a\xbf\x7d\x37\xb6\xb5\x62\x32\x5b\xe8\x34\x49\xa4\x32\x2f\x63\x7c\x38\xfd\x31\xb9\x9a\x9e\x0f\x17\xb3\xf9\xf4\x76\x7a\x31\xbd\x7a\x3f\x9d\xcb\x07\xc1\x25\x09\x17\x89\x92\x46\x52\xc9\x5f\x26\xc0\xd5\xf4\xf2\x6a\x74\x3f\x7a\x3f\xbe\xb9\x8c\x38\x66\xf8\x42\x76\x2f\xce\xaf\xc6\x17\xd3\xc5\xcd\xdd\xb7\xc9\xe8\xfd\x1c\x85\x12\xce\xa8\xf4\x74\x1a\x08\x7c\xa6\xa3\x8c\xaf\xcf\x2f\x47\x8b\xf9\xe8\x72\xf4\xd7\x6c\x71\x3b\x3f\x9f\xdc\x5c\x9d\xdf\x8e\xa7\x93\x77\xe3\xdd\xe5\xec\x85\xc2\x08\x1f\x93\x85\x51\x44\x68\xee\x2a\xd3\xcb\xf4\x3f\x3f\xff\xb1\x18\x8e\xee\xc7\x17\xa3\x9b\x77\x93\x40\x91\x87\x45\x88\xb6\x7b\xd5\x2f\x0c\xd2\x22\x25\x5e\x4d\x2f\x2f\xc7\x93\xcb\x77\x4f\x8b\x5c\x46\x11\x13\xed\x25\x87\x7a\xfc\xec\x6e\x71\x3d\x1d\xbe\x63\x84\xd2\x24\xf5\x62\x19\xbe\x34\x44\x73\x8f\xaf\xb9\xfa\xcd\x62\x38\x9e\xb7\xb9\x1f\x80\x8f\x86\x96\x45\xbb\xe8\x2c\xca\x6e\x99\x76\x3a\xe5\xaa\xa1\xc9\x3b\x91\x83\xbb\xcc\x63\x18\x0b\xa0\x44\x23\x3c\xd8\x46\xfb\x5f\x48\x0d\x70\x49\x09\xaf\x9a\x5b\x87\x60\x67\x1f\x88\x30\xb6\xa3\xb6\xa7\x36\x66\x40\x48\x03\x72\xb9\x64\x94\x11\xce\x37\x40\x32\xc2\xb8\x3b\xd9\x49\x81\xaf\xd0\xc4\x16\x82\x1c\xd2\xbf\xd6\x9b\x1d\xbd\xd1\xfe\x52\xfb\x34\x52\x32\x4d\x3a\xad\x4e\x6b\xb8\x49\x6a\x7b\xa4\x58\x86\x29\x6f\x84\x51\x4e\xd8\x1d\x57\x48\xc2\xa9\xe0\x9b\x8e\xb1\xeb\x90\xf6\x8c\xda\xc1\x6a\x0d\x1e\x04\xd4\x6c\xa2\x7f\xa6\xb1\xfe\xb9\xde\xb0\x9f\xba\xed\x74\xb0\xc3\x19\xbb\xd4\xb6\x3f\x7f\x82\xda\xb3\x8d\x3b\x1a\x5d\x73\x59\x7b\xcc\xe2\x32\x72\x07\x38\x56\x1d\xcd\x56\xa8\x10\x02\xa4\xc4\x5d\x2b\x98\x15\xaa\x07\xa6\xb1\x3a\xae\x3d\x30\xce\x21\x51\x32\x4c\x29\x02\x2a\x25\x55\x1d\x92\xb3\x35\x82\x59\xb1\x9a\x63\x1d\xc3\x5d\x71\x55\x21\xed\x09\xce\x2b\xee\x14\xe8\x8a\xa8\x10\x33\x58\x32\x8e\xf0\x21\xd7\x81\x8c\xfc\x2c\xd6\x3e\x59\x86\x5f\x7e\x0f\x82\xc0\xfb\x8a\x7f\x7c\xf1\xce\xce\xf0\x8b\xf7\xc7\xef\x7f\x3b\xf3\x4e\x3f\xff\xff\xe7\x53\x42\x4f\x4f\x4f\x4f\x3f\xfb\x94\x29\x25\xb5\x97\xc5\x8b\xd3\x13\x2e\xa3\x0f\x03\x98\x48\xd0\x29\x5d\xe5\x88\x52\x55\xc7\xce\x4d\xf7\xe4\x10\x6b\x6f\xf7\x91\xa5\xc6\x4a\xf7\xa0\x53\x28\xf3\x69\xea\xae\xd1\x9e\x73\xf4\x78\xc9\xe1\xc1\x46\x00\x13\xa8\xf5\x4c\xc9\x00\xeb\x24\xf8\xb8\xbd\xe4\xca\x3f\x9d\x54\x91\xb3\xe8\x07\x4c\xf8\xb5\x54\x91\x8f\x7a\xb4\x35\xa0\x25\x25\x06\x3c\xb8\x9b\x8c\xff\x1a\xb4\x1d\xd0\xaf\x3b\x9c\xa7\x24\xfc\xdd\x4a\xe6\x8b\x94\xf3\x56\x92\xed\x3d\xaa\xff\xaf\x27\xd9\x43\xb2\xe7\xeb\xa5\x99\xe3\x3c\xf9\xb9\xfb\x95\x7a\x66\x05\xa2\xb0\xba\xd3\x82\x60\x03\x3a\x4d\x50\xc5\x4c\xfc\x82\x49\xf9\x57\x4c\x9e\x4d\x94\x54\x3b\x1e\x6c\x98\xb9\xeb\x1c\x25\xd0\xa0\xae\x6e\x76\x8a\x2b\x1d\x3f\x77\x1d\xdf\x2e\xeb\x6c\x74\xc0\xb5\x51\xbf\xdc\xc5\x26\x7e\x22\xc3\xae\x69\x2d\xaa\x9d\xe8\xbd\x7e\x3a\xa4\xc8\xbd\x3c\x5f\xd6\x57\xf4\x74\x60\x6d\x4e\xdd\xb0\x67\xbf\x7b\xb5\xc3\x43\x37\x01\x3b\x69\x9e\xe6\xa5\xa1\x8d\xe3\xb2\xb4\x2d\x5d\x55\x20\x91\x90\xda\x30\x0a\x49\xaa\x12\xa9\xf1\x35\xb3\xfc\xaf\x94\xb7\xad\xdf\x17\x56\x71\xb7\x7a\x7b\x12\x75\xcd\xb2\x6f\x77\xdf\x9a\xc5\xfa\xb9\x6d\xea\x7b\xa7\x8e\x9f\x6d\x1f\x0e\xbd\x77\xdc\x95\x98\xf7\xa7\xf4\x5c\x63\xb5\x5b\x7f\x8b\x5a\xeb\xec\xac\xfb\xaf\xa4\x36\xf6\xa4\x0b\xf9\x49\x17\x08\xa5\xa8\x75\x65\x6f\xf7\x1b\x91\xc5\xaf\x3b\x6e\x97\xc3\xb6\x34\x7b\x09\xfb\xcf\x12\x3d\x27\x89\xbd\x28\x7d\x15\xac\x4f\x4d\x7b\x41\x1a\xe5\xa9\x53\xb1\xf6\x92\xd6\xeb\x77\xbb\xa2\x1f\xc3\xed\x74\x38\x1d\x40\x28\xc5\x07\x03\xb6\xb1\xa5\x32\xc4\xe2\x6a\x1d\xf2\xda\xe1\x3a\x15\x9b\xd3\x5c\x83\xbd\x25\x5c\x31\x9d\xf7\xd4\x45\x35\x87\x8b\xf9\xd8\xf6\xd7\x8f\x1b\x60\x42\x1b\xc2\xf3\x4c\x68\x9b\x99\xfa\x86\x4c\xe4\xa6\x74\x1e\xb1\xfd\x15\xee\xe4\x10\x51\xf6\xdd\xe8\xef\xf8\x51\xe0\x49\xbc\xbe\x28\xec\x8b\xc1\x83\x80\xda\x81\xd7\x17\x8e\x4f\x03\xd5\x22\xb4\xfd\x2b\xc5\x5e\xe2\x9f\xa8\xe6\x07\xd6\xf2\x83\x94\xd0\x5b\xd8\x77\x96\xf5\x43\x20\xdb\x86\x69\xfc\x38\x72\x88\x3e\xab\x22\x5e\xcf\x6d\x7d\x39\xf1\x20\xb0\xbd\x56\x7e\x0e\x58\x5f\x03\xb7\xaf\x7d\x3b\x88\xbb\x1e\xb5\xb7\x7a\x0f\x6f\x7b\x11\x36\xd8\x55\x79\xbc\xbc\xaf\xe9\x6d\x69\xf6\x37\x3e\xed\x67\x18\x2a\x20\xf4\x84\xa4\x66\x25\x15\xfb\x8f\x5b\x73\xb2\xfe\xaa\x4f\x98\xf4\xb3\xb3\x00\x0d\x29\x1f\x68\x14\x2f\x14\xe6\x92\xe3\x37\x26\x42\x26\xa2\x3d\x2f\x35\x94\xe4\x58\xdc\xe0\x91\x84\x5d\xda\x5c\xbc\x67\xa7\x23\x80\xce\x1e\x1d\x48\x9d\x06\xf6\x60\xa6\x07\x47\x5e\xb1\xfa\xa6\xf1\x24\xe0\xf0\xd7\x22\x56\x03\xdd\xfd\x9e\xa7\x93\x17\x3c\x52\x51\xb6\x98\xd8\xf5\x5e\xa5\x93\xa2\xa4\x7a\xf0\xdb\x6f\xee\x8b\x42\x2d\x53\x45\xb1\x1a\xaf\x9e\x47\xe8\x62\xc0\x3d\x62\x70\xdf\x33\x54\xc1\x76\x9d\xbb\xfb\x28\xfe\x89\xd0\xbc\x86\x95\x7b\x64\xac\xd8\xf1\x6c\x6f\x89\xaa\x94\xa9\x25\x51\x21\x4f\x43\x9a\x96\x2c\x15\xf7\x39\xbb\xf6\x2f\x67\x3a\xff\xf2\x40\x0c\x5d\xbd\x91\x04\x65\xf8\xa4\x1a\x95\x9d\xf9\x69\x41\x3c\xdb\x9a\xab\x3c\x07\xb4\x84\x7a\xd3\x48\x2b\xab\x86\x75\x08\x2f\x28\x96\xbd\x62\xd8\x75\x4c\x5d\x8f\xbf\xe7\x80\x5f\x16\x8d\x58\x0e\x9b\xc7\xc2\x20\x77\xe3\xb7\x4d\x45\xf1\xd6\xc8\x6f\xa0\x9f\x5d\x8e\xf4\x8b\xa4\x29\x8f\xaa\x70\xb7\xd3\x93\x84\xe1\xa3\x41\xe1\x1e\x1d\x15\x98\x7d\x81\x90\x6a\x23\xe3\x72\x30\x44\xf7\x3a\xaa\x28\x45\xb5\x58\x28\x92\x53\x77\x9b\xf2\x90\xb8\xfe\xaa\x7b\xd0\x8b\x59\x57\xc7\x62\x92\x24\x4c\x44\xba\x3e\x51\x79\x68\x39\x53\xdb\xb2\xca\x25\x6f\x1e\x87\x0d\x7d\xbe\xbe\x7b\x59\xd8\xd7\x75\xa9\xd6\x6b\x8d\x5e\xc0\x17\x54\xb7\xff\x06\x00\x00\xff\xff\xbf\xac\xbd\xe8\xde\x29\x00\x00")

func deployDataVirtletDsYamlBytes() ([]byte, error) {
	return bindataRead(
		_deployDataVirtletDsYaml,
		"deploy/data/virtlet-ds.yaml",
	)
}

func deployDataVirtletDsYaml() (*asset, error) {
	bytes, err := deployDataVirtletDsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "deploy/data/virtlet-ds.yaml", size: 10718, mode: os.FileMode(420), modTime: time.Unix(1522279343, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"deploy/data/virtlet-ds.yaml": deployDataVirtletDsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"deploy": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"virtlet-ds.yaml": &bintree{deployDataVirtletDsYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

